name: Tests

# bpo-40548: "paths-ignore" is not used to skip documentation-only PRs, because
# it prevents to mark a job as mandatory. A PR cannot be merged if a job is
# mandatory but not scheduled because of "paths-ignore".
on:
  push:
  pull_request:

jobs:
  check_source:
    name: 'Check for source changes'
    runs-on: ubuntu-latest
    outputs:
      run_tests: ${{ steps.check.outputs.run_tests }}
      run_ssl_tests: ${{ steps.check.outputs.run_ssl_tests }}
    steps:
      - uses: actions/checkout@v2
      - name: Check for source changes
        id: check
        run: |
          if [ -z "$GITHUB_BASE_REF" ]; then
            echo '::set-output name=run_tests::true'
            echo '::set-output name=run_ssl_tests::true'
          else
            git fetch origin $GITHUB_BASE_REF --depth=1
            # git diff "origin/$GITHUB_BASE_REF..." (3 dots) may be more
            # reliable than git diff "origin/$GITHUB_BASE_REF.." (2 dots),
            # but it requires to download more commits (this job uses
            # "git fetch --depth=1").
            #
            # git diff "origin/$GITHUB_BASE_REF..." (3 dots) works with Git
            # 2.26, but Git 2.28 is stricter and fails with "no merge base".
            #
            # git diff "origin/$GITHUB_BASE_REF.." (2 dots) should be enough on
            # GitHub, since GitHub starts by merging origin/$GITHUB_BASE_REF
            # into the PR branch anyway.
            #
            # https://github.com/python/core-workflow/issues/373
            git diff --name-only origin/$GITHUB_BASE_REF.. | grep -qvE '(\.rst$|^Doc|^Misc)' && echo '::set-output name=run_tests::true' || true
            git diff --name-only origin/$GITHUB_BASE_REF.. | grep -qE '(ssl|hashlib|hmac|^.github)' && echo '::set-output name=run_ssl_tests::true' || true
          fi

          #check_generated_files:
          #  name: 'Check if generated files are up to date'
          #  runs-on: ubuntu-latest
          #  needs: check_source
          #  if: needs.check_source.outputs.run_tests == 'true'
          #  steps:
          #    - uses: actions/checkout@v2
          #    - uses: actions/setup-python@v2
          #    - name: Install Dependencies
          #      run: sudo ./.github/workflows/posix-deps-apt.sh
          #    - name: Add ccache to PATH
          #      run: echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          #    - name: Configure ccache action
          #      uses: hendrikmuhs/ccache-action@v1
          #    - name: Check Autoconf version 2.69 and aclocal 1.16.3
          #      run: |
          #        grep "Generated by GNU Autoconf 2.69" configure
          #        grep "aclocal 1.16.3" aclocal.m4
          #        grep -q "runstatedir" configure
          #        grep -q "PKG_PROG_PKG_CONFIG" aclocal.m4
          #    - name: Regenerate autoconf files
          #      run: docker run --rm -v $(pwd):/src quay.io/tiran/cpython_autoconf:269
          #    - name: Build CPython
          #      run: |
          #        # Build Python with the libpython dynamic library
          #        ./configure --with-pydebug --enable-shared
          #        make -j4 regen-all
          #        make regen-stdlib-module-names
          #    - name: Check for changes
          #      run: |
          #        git add -u
          #        changes=$(git status --porcelain)
          #        # Check for changes in regenerated files
          #        if test -n "$changes"; then
          #          echo "Generated files not up to date."
          #          echo "Perhaps you forgot to run make regen-all or build.bat --regen. ;)"
          #          echo "configure files must be regenerated with a specific, unpatched version of autoconf."
          #          echo "$changes"
          #          exit 1
          #        fi
          #    - name: Check exported libpython symbols
          #      run: make smelly
          #    - name: Check limited ABI symbols
          #      run: make check-limited-abi

  build_ubuntu:
    name: 'Ubuntu'
    runs-on: ubuntu-20.04
    needs: check_source
    if: needs.check_source.outputs.run_tests == 'true'
    env:
      OPENSSL_VER: 1.1.1l
      PYTHONSTRICTEXTENSIONBUILD: 1
    steps:
    - uses: actions/checkout@v2
    - name: Register gcc problem matcher
      run: echo "::add-matcher::.github/problem-matchers/gcc.json"
    - name: Install Dependencies
      run: sudo ./.github/workflows/posix-deps-apt.sh
    - name: Configure OpenSSL env vars
      run: |
        echo "MULTISSL_DIR=${GITHUB_WORKSPACE}/multissl" >> $GITHUB_ENV
        echo "OPENSSL_DIR=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/multissl/openssl/${OPENSSL_VER}/lib" >> $GITHUB_ENV
    - name: 'Restore OpenSSL build'
      id: cache-openssl
      uses: actions/cache@v2.1.7
      with:
        path: ./multissl/openssl/${{ env.OPENSSL_VER }}
        key: ${{ runner.os }}-multissl-openssl-${{ env.OPENSSL_VER }}
    - name: Install OpenSSL
      if: steps.cache-openssl.outputs.cache-hit != 'true'
      run: python3 Tools/ssl/multissltests.py --steps=library --base-directory $MULTISSL_DIR --openssl $OPENSSL_VER --system Linux
    - name: Add ccache to PATH
      run: |
        echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
    - name: Configure ccache action
      uses: hendrikmuhs/ccache-action@v1
    - name: Setup directory envs for out-of-tree builds
      run: |
        echo "CPYTHON_RO_SRCDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-ro-srcdir)" >> $GITHUB_ENV
        echo "CPYTHON_BUILDDIR=$(realpath -m ${GITHUB_WORKSPACE}/../cpython-builddir)" >> $GITHUB_ENV
    - name: Create directories for read-only out-of-tree builds
      run: mkdir -p $CPYTHON_RO_SRCDIR $CPYTHON_BUILDDIR
    - name: Bind mount sources read-only
      run: sudo mount --bind -o ro $GITHUB_WORKSPACE $CPYTHON_RO_SRCDIR
    - name: Configure CPython out-of-tree
      working-directory: ${{ env.CPYTHON_BUILDDIR }}
      run: ../cpython-ro-srcdir/configure --with-pydebug --with-openssl=$OPENSSL_DIR
    - name: Build CPython out-of-tree
      working-directory: ${{ env.CPYTHON_BUILDDIR }}
      run: make -j4
    - name: Display build info
      working-directory: ${{ env.CPYTHON_BUILDDIR }}
      run: make pythoninfo
    - name: Remount sources writable for tests
      # some tests write to srcdir, lack of pyc files slows down testing
      run: sudo mount $CPYTHON_RO_SRCDIR -oremount,rw
    - name: Tests
      working-directory: ${{ env.CPYTHON_BUILDDIR }}
      run: |
        echo ${{ env.CPYTHON_BUILDDIR }}
        ls ${{ env.CPYTHON_BUILDDIR }}
        #nm -D $(ldd ${{ env.CPYTHON_BUILDDIR }}/python | grep libc | cut -f 3 -d " ") | grep mktime   
        ldd ${{ env.CPYTHON_BUILDDIR }}/python
        ldd --version
        uname -a
        cat /etc/timezone
        timedatectl
        sudo timedatectl set-timezone America/Los_Angeles
        timedatectl
        gcc ../cpython-ro-srcdir/bug.c -o bug
        ./bug
        #${{ env.CPYTHON_BUILDDIR }}/python -X tracemalloc=5 ../cpython-ro-srcdir/mktime_bug.py 1
        #${{ env.CPYTHON_BUILDDIR }}/python -X tracemalloc=5 ../cpython-ro-srcdir/mktime_bug.py 0
        #${{ env.CPYTHON_BUILDDIR }}/python -X tracemalloc=5 ../cpython-ro-srcdir/mktime_bug.py -1
        #xvfb-run make buildbottest TESTOPTS="-j4 -uall,-cpu test_time"

